# import User, UserRoles from "types/User.graphql"
# import Store from "types/Store.graphql"
# import Item, ItemInput from "types/Item.graphql"
# import Sale from "types/Sale.graphql"
# import Cart from "types/Cart.graphql"
# import ShippingInput from "types/Shipping.graphql"

scalar JSON
scalar JSONObject

directive @authenticate(roles: [String] = ["REGULAR"]) on FIELD_DEFINITION

directive @cacheControl(
  maxAge: Int,
  scope: CacheControlScope
) on OBJECT | FIELD_DEFINITION

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

"""
App queries
"""
type Query {
  """
  Get currently logged user
  """
  me: User @authenticate
  """
  Get all Stores
  """
  stores: [Store]
  """
  Get all items from a Store
  """
  items(storeId: String): [Item]
  """
  Get a Store
  """
  store(id: String!): Store
  """
  Get an Item
  """
  item(id: String!): Item
  """
  A store can search an Item to add to a Cart
  """
  searchItem(
    """
    Item's name
    """
    name: String!
    """
    Store's Id
    """
    storeId: String!
  ): [Item]
  """
  Get a Cart
  """
  cart(cartId: String!): Cart @authenticate
}

"""
App mutations
"""
type Mutation {
  """
  Create a new user
  """
  createUser(
    """
    User's username
    """
    username: String!
    """
    User's email
    """
    email: String!
    """
    User's password
    """
    password: String!
  ): User

  """
  Update user profile information
  """
  updateProfile(
    """
    New username
    """
    username: String
    """
    New password
    """
    password: String
    """
    Password confirmation
    """
    confirmPassword: String!
  ): User @authenticate
  """
  Create a new Store
  """
  createStore(
    """
    Store's name
    """
    name: String!
  ): Store @authenticate(roles: ["ADMIN"])

  """
  Create a new Item
  """
  createItem(
    """
    Item
    """
    item: ItemInput!
    """
    Store's Id
    """
    storeId: String!
  ): Item @authenticate(roles: ["ADMIN"])

  """
  Creates a Cart on a Store
  """
  createCart(
    """
    Store's id
    """
    storeId: String!
    """
    Collection of Item's id
    """
    items: [String!]!
  ): Cart @authenticate
  """
  Adds an Item at a existing Cart
  """
  addItemOnCart(
    """
    Cart's Id
    """
    cartId: String
    """
    Item's Id
    """
    itemId: String
  ): Cart @authenticate
  """
  Client's data
  """
  shipping(
    """
    Cart's Id
    """
    cartId: String
    """
    Buyer's data
    """
    buyersData: ShippingInput
  ): Cart @authenticate
}
